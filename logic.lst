Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 22:50:03
logic.asm						     Page 1 - 1


				; #########################################################################
				;
				;   logic.asm - Assembly file for EECS205 Assignment 4/5
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include stars.inc	
			      C ; #########################################################################
			      C ;
			      C ;   stars.inc - Includes for EECS205 Assignment 1
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
			      C DrawStarReg PROTO STDCALL ; Renders a star in the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate
			      C                         ;      edi = y-coordinate
			      C 
			      C DrawAllStars PROTO STDCALL ; Routine which uses DrawStarReg to create all the stars
			      C 
			      C EXTERNDEF STDCALL WinMain : NEAR
			      C 
				    include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
				    include rotate.inc	
			      C ; #########################################################################
			      C ;
			      C ;   rotate.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
			      C _EECS205BITMAP STRUCT
			      C  dwWidth      DWORD  ?
			      C  dwHeight     DWORD  ?
			      C  bTransparent BYTE   ?
			      C               BYTE   3 DUP(?)
			      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
			      C 
			      C BasicBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD
			      C 
			      C RotateBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD
			      C 
			      C 
			      C 
				    include game.inc
			      C ; #########################################################################
			      C ;
			      C ;   game.inc - Includes for EECS205 Assignment 4/5
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; These are library routines that you will call (but do NOT have to implement)
			      C BeginDraw PROTO
			      C EndDraw PROTO
			      C 
			      C ;; You should not need to modify these prototypes (actually, it would probably be bad)
			      C GameInit PROTO
			      C GameMain PROTO mouseStatus:DWORD, keyDown:DWORD, keyUp:DWORD
			      C 
			      C ;; Useful Library Routines
			      C DrawString PROTO x:DWORD, y:DWORD, string:PTR BYTE 
			      C DrawInt PROTO x:DWORD, y:DWORD, value:DWORD
			      C 
			      C ;; Feel free to modify the following
			      C GameRender PROTO
			      C GameLogic PROTO xinc:DWORD, yinc:DWORD
			      C 
 00000008		      C Point STRUCT
 00000000  00000000	      C  x     DWORD  ?
 00000004  00000000	      C  y     DWORD  ?
			      C Point ENDS
			      C 
 0000000C		      C Sprite STRUCT
 00000000  00000000	      C bitmap    DWORD ?
 00000004  00000000	      C location  Point<?,?>
	   00000000
			      C Sprite ENDS
			      C 
 0000001C		      C AdvSprite STRUCT
 00000000  00000000	      C bitmap    DWORD ?
 00000004  00000000	      C location  Point<?,?>
	   00000000
 0000000C  00000000	      C top  	  DWORD ?
 00000010  00000000	      C bot  	  DWORD ?
 00000014  00000000	      C left 	  DWORD ?
 00000018  00000000	      C right 	  DWORD ?
			      C AdvSprite ENDS
			      C 
			      C 
			      C EXTERNDEF lpTyroneBmp : DWORD
			      C 
			      C EXTERNDEF charSprite	: AdvSprite
			      C EXTERNDEF enemySprites  : AdvSprite
			      C EXTERNDEF fireballs		: AdvSprite
			      C EXTERNDEF exp			: Sprite
			      C EXTERNDEF bgSprites 	: Sprite
			      C 
			      C EXTERNDEF mouseX:DWORD
			      C EXTERNDEF mouseY:DWORD
			      C EXTERNDEF charX:DWORD
			      C EXTERNDEF charY:DWORD
			      C EXTERNDEF facing:DWORD
			      C EXTERNDEF gState:DWORD
			      C EXTERNDEF fxState:DWORD
			      C EXTERNDEF score: DWORD
			      C 
			      C 
				    include keys.inc		
			      C ;;
			      C ;; keys.inc -- These are virtual key codes to
			      C ;; captuer any keystrokes you desire
			      C 
 = 00000008		      C VK_BACK                              equ 8h
 = 00000003		      C VK_CANCEL                            equ 3h
 = 00000014		      C VK_CAPITAL                           equ 14h
 = 0000000C		      C VK_CLEAR                             equ 0Ch
 = 00000011		      C VK_CONTROL                           equ 11h
 = 0000002E		      C VK_DELETE                            equ 2Eh
 = 00000028		      C VK_DOWN                              equ 28h
 = 00000023		      C VK_END                               equ 23h
 = 0000001B		      C VK_ESCAPE                            equ 1Bh
 = 0000002B		      C VK_EXECUTE                           equ 2Bh
 = 0000002F		      C VK_HELP                              equ 2Fh
 = 00000024		      C VK_HOME                              equ 24h
 = 0000002D		      C VK_INSERT                            equ 2Dh
 = 00000001		      C VK_LBUTTON                           equ 1h
 = 00000025		      C VK_LEFT                              equ 25h
 = 00000004		      C VK_MBUTTON                           equ 4h
 = 00000012		      C VK_MENU                              equ 12h
 = 00000022		      C VK_NEXT                              equ 22h
 = 00000013		      C VK_PAUSE                             equ 13h
 = 00000022		      C VK_PGDN                              equ 22h
 = 00000021		      C VK_PGUP                              equ 21h
 = 0000002A		      C VK_PRINT                             equ 2Ah
 = 00000021		      C VK_PRIOR                             equ 21h
 = 00000002		      C VK_RBUTTON                           equ 2h
 = 0000000D		      C VK_RETURN                            equ 0Dh
 = 00000027		      C VK_RIGHT                             equ 27h
 = 00000029		      C VK_SELECT                            equ 29h
 = 00000010		      C VK_SHIFT                             equ 10h
 = 0000002C		      C VK_SNAPSHOT                          equ 2Ch
 = 00000020		      C VK_SPACE                             equ 20h
 = 00000009		      C VK_TAB                               equ 9h
 = 00000026		      C VK_UP                                equ 26h
 = 00000060		      C VK_NUMPAD0                           equ 60h
 = 00000061		      C VK_NUMPAD1                           equ 61h
 = 00000062		      C VK_NUMPAD2                           equ 62h
 = 00000063		      C VK_NUMPAD3                           equ 63h
 = 00000064		      C VK_NUMPAD4                           equ 64h
 = 00000065		      C VK_NUMPAD5                           equ 65h
 = 00000066		      C VK_NUMPAD6                           equ 66h
 = 00000067		      C VK_NUMPAD7                           equ 67h
 = 00000068		      C VK_NUMPAD8                           equ 68h
 = 00000069		      C VK_NUMPAD9                           equ 69h
 = 0000006A		      C VK_MULTIPLY                          equ 6Ah
 = 0000006B		      C VK_ADD                               equ 6Bh
 = 0000006C		      C VK_SEPARATOR                         equ 6Ch
 = 0000006D		      C VK_SUBTRACT                          equ 6Dh
 = 0000006E		      C VK_DECIMAL                           equ 6Eh
 = 0000006F		      C VK_DIVIDE                            equ 6Fh
 = 00000070		      C VK_F1                                equ 70h
 = 00000071		      C VK_F2                                equ 71h
 = 00000072		      C VK_F3                                equ 72h
 = 00000073		      C VK_F4                                equ 73h
 = 00000074		      C VK_F5                                equ 74h
 = 00000075		      C VK_F6                                equ 75h
 = 00000076		      C VK_F7                                equ 76h
 = 00000077		      C VK_F8                                equ 77h
 = 00000078		      C VK_F9                                equ 78h
 = 00000079		      C VK_F10                               equ 79h
 = 0000007A		      C VK_F11                               equ 7Ah
 = 0000007B		      C VK_F12                               equ 7Bh
 = 0000007C		      C VK_F13                               equ 7Ch
 = 0000007D		      C VK_F14                               equ 7Dh
 = 0000007E		      C VK_F15                               equ 7Eh
 = 0000007F		      C VK_F16                               equ 7Fh
 = 00000080		      C VK_F17                               equ 80h
 = 00000081		      C VK_F18                               equ 81h
 = 00000082		      C VK_F19                               equ 82h
 = 00000083		      C VK_F20                               equ 83h
 = 00000084		      C VK_F21                               equ 84h
 = 00000085		      C VK_F22                               equ 85h
 = 00000086		      C VK_F23                               equ 86h
 = 00000087		      C VK_F24                               equ 87h
 = 00000090		      C VK_NUMLOCK                           equ 90h
 = 00000091		      C VK_SCROLL                            equ 91h
 = 000000A0		      C VK_LSHIFT                            equ 0A0h
 = 000000A1		      C VK_RSHIFT                            equ 0A1h
 = 000000A2		      C VK_LCONTROL                          equ 0A2h
 = 000000A3		      C VK_RCONTROL                          equ 0A3h
 = 000000A4		      C VK_LMENU                             equ 0A4h
 = 000000A5		      C VK_RMENU                             equ 0A5h
 = 000000F6		      C VK_ATTN                              equ 0F6h
 = 000000F7		      C VK_CRSEL                             equ 0F7h
 = 000000F8		      C VK_EXSEL                             equ 0F8h
 = 000000F9		      C VK_EREOF                             equ 0F9h
 = 000000FA		      C VK_PLAY                              equ 0FAh
 = 000000FB		      C VK_ZOOM                              equ 0FBh
 = 000000FC		      C VK_NONAME                            equ 0FCh
 = 000000FD		      C VK_PA1                               equ 0FDh
 = 000000FE		      C VK_OEM_CLEAR                         equ 0FEh
 = 00000030		      C VK_0						 equ 30h
 = 00000031		      C VK_1						 equ 31h
 = 00000032		      C VK_2						 equ 32h
 = 00000033		      C VK_3						 equ 33h
 = 00000034		      C VK_4						 equ 34h
 = 00000035		      C VK_5						 equ 35h
 = 00000036		      C VK_6						 equ 36h
 = 00000037		      C VK_7						 equ 37h
 = 00000038		      C VK_8						 equ 38h
 = 00000039		      C VK_9						 equ 39h
 = 00000041		      C VK_A						 equ 41h
 = 00000042		      C VK_B						 equ 42h
 = 00000043		      C VK_C						 equ 43h
 = 00000044		      C VK_D						 equ 44h
 = 00000045		      C VK_E						 equ 45h
 = 00000046		      C VK_F						 equ 46h
 = 00000047		      C VK_G						 equ 47h
 = 00000048		      C VK_H						 equ 48h
 = 00000049		      C VK_I						 equ 49h
 = 0000004A		      C VK_J						 equ 4Ah
 = 0000004B		      C VK_K						 equ 4Bh
 = 0000004C		      C VK_L						 equ 4Ch
 = 0000004D		      C VK_M						 equ 4Dh
 = 0000004E		      C VK_N						 equ 4Eh
 = 0000004F		      C VK_O						 equ 4Fh
 = 00000050		      C VK_P						 equ 50h
 = 00000051		      C VK_Q						 equ 51h
 = 00000052		      C VK_R						 equ 52h
 = 00000053		      C VK_S						 equ 53h
 = 00000054		      C VK_T						 equ 54h
 = 00000055		      C VK_U						 equ 55h
 = 00000056		      C VK_V						 equ 56h
 = 00000057		      C VK_W						 equ 57h
 = 00000058		      C VK_X						 equ 58h
 = 00000059		      C VK_Y						 equ 59h
 = 0000005A		      C VK_Z						 equ 5Ah
			      C 
					
 00000000			.DATA
 00000000 00000181		floor DWORD 385
 00000004 00000001		facing DWORD 1 ; 0 is left, 1 is right

 00000008 00			scroll BYTE 0
 00000009 01			grav BYTE 1
 0000000A 00000000		timeinair DWORD 0
 0000000E 00000000		shotsFired DWORD 0
 00000012 00000000		killcount DWORD 0
 00000016 00000000		time DWORD 0
 00000000			.CODE

				;; Define the function GameLogic
				;; Since we have thoroughly covered defining functions in class, its up to you from here on out...

 00000000			GameLogic PROC xinc:DWORD, yinc:DWORD

				;; gamestates
				;; 1 = normal
				;; 2 = end
				;;
 00000003  83 3D 00000000 E		cmp gState, 2
	   02
 0000000A  0F 84 0000021C		je ENDGAME
					
 00000010  FF 05 00000016 R		inc time; increase game time
					
					;;check for collisions
 00000016  A1 00000008 E		mov eax, charSprite.location.y 
 0000001B  83 C0 1F			add eax, 31
 0000001E  A3 00000010 E		mov charSprite.bot, eax
 00000023  83 E8 3E			sub eax, 62
 00000026  A3 0000000C E		mov charSprite.top, eax
					
 0000002B  A1 00000004 E		mov eax, charSprite.location.x
 00000030  83 C0 1F			add eax, 31
 00000033  A3 00000018 E		mov charSprite.right, eax
 00000038  83 E8 3F			sub eax, 63 
 0000003B  A3 00000014 E		mov charSprite.left, eax
					
					;projectiles (FIREBALLS)
 00000040  83 7D 08 0D			cmp xinc, 0Dh ;return
 00000044  75 2D			jne dontfire
 00000046  83 3D 0000000E R		cmp shotsFired, 56 ;max shots = 3
	   38
 0000004D  7F 24			jg dontfire
 0000004F  B8 00000000 E		mov eax, offset fireballs
 00000054  03 05 0000000E R		add eax, shotsFired
 0000005A  8B 1D 00000004 E		mov ebx, charSprite.location.x
 00000060  89 58 04			mov (AdvSprite PTR [eax]).location.x, ebx
 00000063  8B 1D 00000008 E		mov ebx, charSprite.location.y
 00000069  89 58 08			mov (AdvSprite PTR [eax]).location.y, ebx
 0000006C  83 05 0000000E R		add shotsFired, 28 ;1 shot = 28bytes
	   1C
 00000073			dontfire:

					;update projectile positions
 00000073  B8 00000000 E		mov eax, offset fireballs
 00000078  BE 00000038			mov esi, 56
 0000007D  03 F0			add esi, eax
 0000007F			ll: 
 0000007F  83 40 04 03			add (AdvSprite PTR [eax]).location.x, 3
					
					;update hitbox bounds on sprite
 00000083  8B 58 08			mov ebx, (AdvSprite PTR [eax]).location.y 
 00000086  83 C3 12			add ebx, 18
 00000089  89 58 10			mov (AdvSprite PTR [eax]).bot, ebx
 0000008C  83 EB 24			sub ebx, 36
 0000008F  89 58 0C			mov (AdvSprite PTR [eax]).top, ebx
					
 00000092  8B 58 04			mov ebx, (AdvSprite PTR [eax]).location.x
 00000095  83 C3 19			add ebx, 25
 00000098  89 58 18			mov (AdvSprite PTR [eax]).right, ebx
 0000009B  83 EB 32			sub ebx, 50
 0000009E  89 58 14			mov (AdvSprite PTR [eax]).left, ebx
					
					;increment
 000000A1  3B C6			cmp eax, esi
 000000A3  7D 05			jge sk
 000000A5  83 C0 1C			add eax, 28
 000000A8  EB D5			jmp ll
 000000AA			sk:
					
					;calculations for enemysprites
 000000AA  B8 00000000 E		mov eax, offset enemySprites
 000000AF  BE 0000001C			mov esi, 28
 000000B4  03 F0			add esi, eax ;max
					


 000000B6			d3:
 000000B6  83 68 04 03			sub (AdvSprite PTR [eax]).location.x, 3
					
					;update hitbox bounds on sprite
 000000BA  8B 58 08			mov ebx, (AdvSprite PTR [eax]).location.y 
 000000BD  83 C3 12			add ebx, 18
 000000C0  89 58 10			mov (AdvSprite PTR [eax]).bot, ebx
 000000C3  83 EB 24			sub ebx, 36
 000000C6  89 58 0C			mov (AdvSprite PTR [eax]).top, ebx
					
 000000C9  8B 58 04			mov ebx, (AdvSprite PTR [eax]).location.x
 000000CC  83 C3 10			add ebx, 16
 000000CF  89 58 18			mov (AdvSprite PTR [eax]).right, ebx
 000000D2  83 EB 20			sub ebx, 32 
 000000D5  89 58 14			mov (AdvSprite PTR [eax]).left, ebx
						
						
					;compare to fireballs (NESTED LOOP)
 000000D8  BA 00000000 E		mov edx, offset fireballs
 000000DD  B9 00000038			mov ecx, 56
 000000E2  03 CA			add ecx, edx ;max
 000000E4			loo:
					;nest loop
 000000E4  8B 5A 0C			mov ebx, (AdvSprite PTR [edx]).top
 000000E7  3B 58 10			cmp ebx, (AdvSprite PTR [eax]).bot
 000000EA  7F 4C			jg sk2
 000000EC  8B 5A 10			mov ebx, (AdvSprite PTR [edx]).bot
 000000EF  3B 58 0C			cmp ebx, (AdvSprite PTR [eax]).top
 000000F2  7C 44			jl sk2
 000000F4  8B 5A 18			mov ebx, (AdvSprite PTR [edx]).right
 000000F7  3B 58 14			cmp ebx, (AdvSprite PTR [eax]).left
 000000FA  7C 3C			jl sk2
 000000FC  3B 58 18			cmp ebx, (AdvSprite PTR [eax]).right
 000000FF  7F 37			jg sk2
					;;collision detected
 00000101  FF 05 00000000 E		inc score
 00000107  8B 78 04			mov edi, (AdvSprite PTR [eax]).location.x
 0000010A  89 3D 00000004 E		mov exp.location.x, edi
 00000110  8B 78 08			mov edi, (AdvSprite PTR [eax]).location.y
 00000113  89 3D 00000008 E		mov exp.location.y, edi
 00000119  C7 05 00000000 E		mov fxState, 1
	   00000001
					
 00000123  81 40 04			add (AdvSprite PTR [eax]).location.x, 600
	   00000258
 0000012A  81 42 04			add (AdvSprite PTR [edx]).location.x, 650
	   0000028A
 00000131  83 2D 0000000E R		sub shotsFired, 28
	   1C
					

 00000138			sk2:
					; increment
 00000138  3B D1			cmp edx, ecx
 0000013A  7D 05			jge s4
 0000013C  83 C2 1C			add edx, 28
 0000013F  EB A3			jmp loo
 00000141			s4:


					;compare to char bounds
 00000141  8B 1D 0000000C E		mov ebx, charSprite.top
 00000147  3B 58 10			cmp ebx, (AdvSprite PTR [eax]).bot
 0000014A  7F 2A			jg f
 0000014C  8B 1D 00000010 E		mov ebx, charSprite.bot
 00000152  3B 58 0C			cmp ebx, (AdvSprite PTR [eax]).top
 00000155  7C 1F			jl f
 00000157  8B 1D 00000018 E		mov ebx, charSprite.right
 0000015D  3B 58 14			cmp ebx, (AdvSprite PTR [eax]).left
 00000160  7C 14			jl f
 00000162  3B 58 18			cmp ebx, (AdvSprite PTR [eax]).right
 00000165  7F 0F			jg f
 00000167  C7 05 00000000 E		mov gState, 2
	   00000002
 00000171  E9 000000B6			jmp ENDGAME

					
 00000176			f:
 00000176  8B 58 04			mov ebx, (AdvSprite PTR [eax]).location.x
 00000179  83 FB EC			cmp ebx, -20
 0000017C  7E 0C			jle r
					;;increment
 0000017E  3B C6			cmp eax, esi
 00000180  7D 14			jge s3
 00000182  83 C0 1C			add eax, 28
 00000185  E9 FFFFFF2C			jmp d3
					
 0000018A			r:
 0000018A  81 40 04			add (AdvSprite PTR [eax]).location.x, 1000
	   000003E8
 00000191  E9 FFFFFF20			jmp d3
 00000196			s3:




					
					; facing left or right
 00000196  83 7D 08 27			cmp xinc, 27h ;right
 0000019A  75 11			jne dn
 0000019C  83 05 00000004 E		add charSprite.location.x, 3
	   03
 000001A3  C7 05 00000004 R		mov facing, 1
	   00000001
 000001AD				dn:
 000001AD  83 7D 08 25			cmp xinc, 25h ;left
 000001B1  75 11			jne dnn
 000001B3  83 2D 00000004 E		sub charSprite.location.x, 3
	   03
 000001BA  C7 05 00000004 R		mov facing, 0
	   00000000
 000001C4				dnn:
					
					
 000001C4  83 7D 08 20			cmp xinc, 20h ;spacebar
 000001C8  75 09			jne knd
 000001CA  83 2D 00000008 E		sub charSprite.location.y, 10
	   0A
 000001D1  EB 14			jmp SKIP
 000001D3			knd:
					;gravity
 000001D3  A1 00000008 E		mov eax, charSprite.location.y
 000001D8  3B 05 00000000 R		cmp eax, floor
 000001DE  7F 07		    jg SKIP
 000001E0  83 05 00000008 E		add charSprite.location.y, 1
	   01
 000001E7				SKIP:
					


					;; bg sprite location updates
 000001E7  B8 00000000 E		mov eax, offset bgSprites
 000001EC  BE 000001BC			mov esi, 444
 000001F1  03 F0			add esi, eax ;max
					
					;slow down the scrolling, scroll every third loop
 000001F3  80 3D 00000008 R		cmp scroll, 2
	   02
 000001FA  75 2A			jne s
 000001FC			d1:
 000001FC  83 68 04 01			sub (Sprite PTR [eax]).location.x, 1
					
 00000200  8B 58 04			mov ebx, (Sprite PTR [eax]).location.x
 00000203  81 FB FFFFFE3E		cmp ebx, -450
 00000209  7E 10			jle relocate
 0000020B			d2:
 0000020B  3B C6			cmp eax, esi
 0000020D  7D 17			jge s
 0000020F  83 C0 0C			add eax, 12
 00000212  C6 05 00000008 R		mov scroll, 0 ;set to 0
	   00
 00000219  EB E1			jmp d1
					
 0000021B			relocate:
 0000021B  81 C3 00000578		add ebx, 1400
 00000221  89 58 04			mov (Sprite PTR [eax]).location.x, ebx
 00000224  EB E5			jmp d2
					
 00000226			s:
 00000226  FE 05 00000008 R		inc scroll ;add 1
					
 0000022C			ENDGAME:

 0000022C  83 3D 00000016 R		cmp time, 20
	   14
 00000233  7C 14			jl sss
 00000235  C7 05 00000000 E		mov fxState, 0
	   00000000
 0000023F  C7 05 00000016 R		mov time, 0
	   00000000
 00000249			sss:

				INVOKE GameRender
				ret
 00000252			GameLogic ENDP

					
				END
Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 22:50:03
logic.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

AdvSprite  . . . . . . . . . . .	 0000001C
  bitmap . . . . . . . . . . . .	 00000000	 DWord
  location . . . . . . . . . . .	 00000004	 QWord
  top  . . . . . . . . . . . . .	 0000000C	 DWord
  bot  . . . . . . . . . . . . .	 00000010	 DWord
  left . . . . . . . . . . . . .	 00000014	 DWord
  right  . . . . . . . . . . . .	 00000018	 DWord
Point  . . . . . . . . . . . . .	 00000008
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
Sprite . . . . . . . . . . . . .	 0000000C
  bitmap . . . . . . . . . . . .	 00000000	 DWord
  location . . . . . . . . . . .	 00000004	 QWord
_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000001A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000252 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BasicBlit  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BeginDraw  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BlitReg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawAllStars . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawStarReg  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EndDraw  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameInit . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameLogic  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000252 Public STDCALL
  xinc . . . . . . . . . . . . .	DWord	 bp + 00000008
  yinc . . . . . . . . . . . . .	DWord	 bp + 0000000C
  dontfire . . . . . . . . . . .	L Near	 00000073 _TEXT	
  ll . . . . . . . . . . . . . .	L Near	 0000007F _TEXT	
  sk . . . . . . . . . . . . . .	L Near	 000000AA _TEXT	
  d3 . . . . . . . . . . . . . .	L Near	 000000B6 _TEXT	
  loo  . . . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  sk2  . . . . . . . . . . . . .	L Near	 00000138 _TEXT	
  s4 . . . . . . . . . . . . . .	L Near	 00000141 _TEXT	
  f  . . . . . . . . . . . . . .	L Near	 00000176 _TEXT	
  r  . . . . . . . . . . . . . .	L Near	 0000018A _TEXT	
  s3 . . . . . . . . . . . . . .	L Near	 00000196 _TEXT	
  dn . . . . . . . . . . . . . .	L Near	 000001AD _TEXT	
  dnn  . . . . . . . . . . . . .	L Near	 000001C4 _TEXT	
  knd  . . . . . . . . . . . . .	L Near	 000001D3 _TEXT	
  SKIP . . . . . . . . . . . . .	L Near	 000001E7 _TEXT	
  d1 . . . . . . . . . . . . . .	L Near	 000001FC _TEXT	
  d2 . . . . . . . . . . . . . .	L Near	 0000020B _TEXT	
  relocate . . . . . . . . . . .	L Near	 0000021B _TEXT	
  s  . . . . . . . . . . . . . .	L Near	 00000226 _TEXT	
  ENDGAME  . . . . . . . . . . .	L Near	 0000022C _TEXT	
  sss  . . . . . . . . . . . . .	L Near	 00000249 _TEXT	
GameMain . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameRender . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RotateBlit . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000000 FLAT	External STDCALL
VK_0 . . . . . . . . . . . . . .	Number	 00000030h   
VK_1 . . . . . . . . . . . . . .	Number	 00000031h   
VK_2 . . . . . . . . . . . . . .	Number	 00000032h   
VK_3 . . . . . . . . . . . . . .	Number	 00000033h   
VK_4 . . . . . . . . . . . . . .	Number	 00000034h   
VK_5 . . . . . . . . . . . . . .	Number	 00000035h   
VK_6 . . . . . . . . . . . . . .	Number	 00000036h   
VK_7 . . . . . . . . . . . . . .	Number	 00000037h   
VK_8 . . . . . . . . . . . . . .	Number	 00000038h   
VK_9 . . . . . . . . . . . . . .	Number	 00000039h   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_ATTN  . . . . . . . . . . . .	Number	 000000F6h   
VK_A . . . . . . . . . . . . . .	Number	 00000041h   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_B . . . . . . . . . . . . . .	Number	 00000042h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_CRSEL . . . . . . . . . . . .	Number	 000000F7h   
VK_C . . . . . . . . . . . . . .	Number	 00000043h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_D . . . . . . . . . . . . . .	Number	 00000044h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_EREOF . . . . . . . . . . . .	Number	 000000F9h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_EXSEL . . . . . . . . . . . .	Number	 000000F8h   
VK_E . . . . . . . . . . . . . .	Number	 00000045h   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_F . . . . . . . . . . . . . .	Number	 00000046h   
VK_G . . . . . . . . . . . . . .	Number	 00000047h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_H . . . . . . . . . . . . . .	Number	 00000048h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_I . . . . . . . . . . . . . .	Number	 00000049h   
VK_J . . . . . . . . . . . . . .	Number	 0000004Ah   
VK_K . . . . . . . . . . . . . .	Number	 0000004Bh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_L . . . . . . . . . . . . . .	Number	 0000004Ch   
VK_MBUTTON . . . . . . . . . . .	Number	 00000004h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_M . . . . . . . . . . . . . .	Number	 0000004Dh   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NONAME  . . . . . . . . . . .	Number	 000000FCh   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_N . . . . . . . . . . . . . .	Number	 0000004Eh   
VK_OEM_CLEAR . . . . . . . . . .	Number	 000000FEh   
VK_O . . . . . . . . . . . . . .	Number	 0000004Fh   
VK_PA1 . . . . . . . . . . . . .	Number	 000000FDh   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PGDN  . . . . . . . . . . . .	Number	 00000022h   
VK_PGUP  . . . . . . . . . . . .	Number	 00000021h   
VK_PLAY  . . . . . . . . . . . .	Number	 000000FAh   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_P . . . . . . . . . . . . . .	Number	 00000050h   
VK_Q . . . . . . . . . . . . . .	Number	 00000051h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_R . . . . . . . . . . . . . .	Number	 00000052h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SELECT  . . . . . . . . . . .	Number	 00000029h   
VK_SEPARATOR . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_S . . . . . . . . . . . . . .	Number	 00000053h   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_T . . . . . . . . . . . . . .	Number	 00000054h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
VK_U . . . . . . . . . . . . . .	Number	 00000055h   
VK_V . . . . . . . . . . . . . .	Number	 00000056h   
VK_W . . . . . . . . . . . . . .	Number	 00000057h   
VK_X . . . . . . . . . . . . . .	Number	 00000058h   
VK_Y . . . . . . . . . . . . . .	Number	 00000059h   
VK_ZOOM  . . . . . . . . . . . .	Number	 000000FBh   
VK_Z . . . . . . . . . . . . . .	Number	 0000005Ah   
WinMain  . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
bgSprites  . . . . . . . . . . .	Sprite	 00000000 FLAT	External STDCALL
charSprite . . . . . . . . . . .	AdvSprite  00000000 FLAT	External STDCALL
charX  . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
charY  . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
enemySprites . . . . . . . . . .	AdvSprite  00000000 FLAT	External STDCALL
exp  . . . . . . . . . . . . . .	Sprite	 00000000 FLAT	External STDCALL
facing . . . . . . . . . . . . .	DWord	 00000004 _DATA	Public STDCALL
fireballs  . . . . . . . . . . .	AdvSprite  00000000 FLAT	External STDCALL
floor  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
fxState  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
gState . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
grav . . . . . . . . . . . . . .	Byte	 00000009 _DATA	
killcount  . . . . . . . . . . .	DWord	 00000012 _DATA	
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
lpTyroneBmp  . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
mouseX . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
mouseY . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
score  . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
scroll . . . . . . . . . . . . .	Byte	 00000008 _DATA	
shotsFired . . . . . . . . . . .	DWord	 0000000E _DATA	
timeinair  . . . . . . . . . . .	DWord	 0000000A _DATA	
time . . . . . . . . . . . . . .	DWord	 00000016 _DATA	

	   0 Warnings
	   0 Errors
